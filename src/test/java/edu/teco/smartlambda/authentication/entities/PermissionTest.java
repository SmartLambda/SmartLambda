package edu.teco.smartlambda.authentication.entities;

import edu.teco.smartlambda.Application;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.torpedoquery.jpa.OnGoingStringCondition;
import org.torpedoquery.jpa.Query;
import org.torpedoquery.jpa.Torpedo;
import org.torpedoquery.jpa.ValueOnGoingCondition;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.nullable;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

/**
 *
 */
@SuppressWarnings("unchecked")
@RunWith(PowerMockRunner.class)
@PrepareForTest({Application.class, Torpedo.class})
public class PermissionTest {
	@Before
	public void buildUp() {
		mockStatic(Application.class);
		mockStatic(Torpedo.class);
		
		when(Application.getInstance()).thenReturn(mock(Application.class));
		when(Application.getInstance().getSessionFactory()).thenReturn(mock(SessionFactory.class));
		when(Application.getInstance().getSessionFactory().getCurrentSession()).thenReturn(mock(Session.class));
		
		when(Torpedo.from(any(Class.class))).thenCallRealMethod();
		when(Torpedo.where(nullable(Object.class))).thenReturn(mock(ValueOnGoingCondition.class));
		when(Torpedo.where(nullable(String.class))).thenReturn(mock(OnGoingStringCondition.class));
		when(Torpedo.select(any(Object.class))).thenReturn(mock(Query.class));
	}
	
	@Test
	public void testGettersAndSetters() throws Exception {
		final User       user       = User.createUser("").getLeft();
		final Permission permission = new Permission(user, PermissionType.CREATE, user.getPrimaryKey());
		Assert.assertNotNull(permission.getUser());
		Assert.assertNotNull(permission.getPermissionType());
		Assert.assertNotNull(permission.getKey());
		Assert.assertNotNull(permission.getId()); //is generated by hibernate
	}
}